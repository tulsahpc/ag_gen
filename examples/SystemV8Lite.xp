exploit spoofTempSensor(a)=
	preconditions:
        quality:a,platform!=physical;
		quality:a,platform!=controlBlade;
		quality:a,platform!=pulseControlRod;
		quality:a,platform!=unknownScramInput;#not enough info on these systems yet
		quality:a,platform=tempSensor;#to limit size
		quality:a,status=ok;
    postconditions:
        update quality:a,status=compromised;
.

exploit spoofSeismicSensor(a)=
	preconditions:
        quality:a,platform!=physical;
		quality:a,platform!=controlBlade;
		quality:a,platform!=pulseControlRod;
		quality:a,platform!=unknownScramInput;#not enough info on these systems yet
		quality:a,platform=seismicSensor;#to limit size
		quality:a,status=ok;
    postconditions:
        update quality:a,status=compromised;
.

exploit earthquake(phys,sensor)=
	preconditions:
		quality:phys,platform=physical;
		quality:phys,seismicActivity<.0061;#below scram levels
		quality:sensor,platform=seismicSensor;
		quality:sensor,status=ok;
		topology:phys<->sensor,physical;
	postconditions:
		update quality:phys,seismicActivity:=.007;
		update quality:sensor,magnitude:=.007;
.
exploit tempScram(sensor,scram)=
	preconditions:
        quality:sensor,platform=tempSensor;
		quality:sensor,powerStatus=on;
        quality:sensor,temp>500;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
    postconditions:
        update quality:scram,activated=true;
.

exploit seismicScram(sensor,scram)=
	preconditions:
		quality:sensor,platform=seismicSensor;
		quality:sensor,powerStatus=on;
		quality:sensor,magnitude>.0061;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.
exploit executeScram(crc,scram)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,activated=true;
		topology: scram->crc,connected_emag_power;
    postconditions:
        update quality:crc,emagPower=off;
		delete topology:scram->crc,connected_emag_power;
.
exploit dropBlades1(crc, blade)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:blade,platform=controlBlade;

		quality:crc,emagPower=off;

		topology:blade->crc,subcomponent;
    postconditions:
        update quality:blade,actualPosition:=0;
.

exploit dropBlades2(crc, blade)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:blade,platform=pulseControlRod;

		quality:crc,emagPower=off;

		topology:blade->crc,subcomponent;
    postconditions:
        update quality:blade,actualPosition:=0;
.
exploit miscalibrateTempSensorLow(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,calibration=normal;
	postconditions:
		update quality:sensor,calibration=low;
		update quality:sensor,temp-=50;#Arbitrary
.

exploit miscalibrateTempSensorHigh(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,calibration=normal;
	postconditions:
		update quality:sensor,calibration=high;
		update quality:sensor,temp+=50;#Arbitrary
.
exploit incTempReading(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,temp:=600;#Arbitrary above scram point
.

exploit incSeismicReading(sensor)=
	preconditions:
		quality:sensor,platform=seismicSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,magnitude:=.007;#Arbitrary above scram point
.
exploit dosScramSensorTrigger(sensor, scram)=
	preconditions:
		quality: scram,platform=scramUnit;
		quality: sensor,platform!=operator;#TODO
		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		delete topology: sensor->scram,connected_modbus_slave;
		delete topology: scram->sensor,connected_modbus_master;
		update quality:scram,activated=true;
.

exploit dosScramSensorUntrigger(sensor, scram)=
	preconditions:
		quality: scram,platform=scramUnit;
		quality: sensor,platform=operator;#TODO
		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		delete topology: sensor->scram,connected_modbus_slave;
		delete topology: scram->sensor,connected_modbus_master;
.

exploit triggerManualScram(sensor)=
	preconditions:
		quality:sensor,platform=operatorStation;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,manualScram=true;
.





