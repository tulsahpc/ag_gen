exploit closeAirSupplyValve(airSupply)=
	preconditions:
		quality:airSupply,platform=airCompressor;
		quality:airSupply,status=ok;
		quality:airSupply,powerStatus=on;
		quality:airSupply,ctValve=open;
		quality:airSupply,tankPressure>20;#Arbitrary
	postconditions:
		update quality:airSupply,ctValve=closed;
.

exploit earthquake(phys,sensor)=
	preconditions:
		quality:phys,platform=physical;
		quality:phys,seismicActivity<.0061;#below scram levels
		quality:sensor,platform=seismicSensor;
		quality:sensor,status=ok;
		topology:phys<->sensor,physical;
	postconditions:
		update quality:phys,seismicActivity:=.007;
		update quality:sensor,magnitude:=.007;
.
exploit backupPowerOn(building,backup,system)=
	preconditions:
		quality:backup,platform=backupPower;
		topology:building->backup,power<114;#Trigger when backup can't charge
		topology:backup->system,power<114;
		quality:backup,chargeLevel>0;
		quality:backup,status=ok;
	postconditions:
		update topology:backup->system,power:=120;
.

exploit backupPowerChargeLoss(building,backup,system)=
	preconditions:
		quality:backup,platform=backupPower;
		topology:building->backup,power<114;#Trigger when backup can't charge
		topology:backup->system,power>=114;
		quality:backup,chargeLevel>0;
		quality:backup,status=ok;
	postconditions:
		update quality:backup,chargeLevel-=0.05;
.
exploit powerRestored(building,backup,system)=
	preconditions:
		quality:backup,platform=backupPower;
		topology:building->backup,power>=114;#Trigger when backup can charge
		topology:backup->system,power>=114;
		quality:backup,status=ok;
	postconditions:
		update topology:backup->system,power:=0;
.

exploit rechargeBackup(building,backup)=
	preconditions:
		quality:backup,platform=backupPower;
		topology:building->backup,power>=114;#Trigger when backup can charge
		quality:backup,chargeLevel<1;
		quality:backup,status=ok;
	postconditions:
		update quality:backup,chargeLevel:=1;
.
exploit moveControlBladeUp1(crc, blade, operator)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;
		quality: operator, platform=operatorStation;

		quality: crc, status=ok;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;
		topology: blade->crc, subcomponent;

		quality: operator, operationMode!=test;
		quality: operator, operationMode!=rundown;
	postconditions:
		update quality: blade, actualPosition+=.5;
		update quality: blade, reportedPosition+=.5;
.
exploit moveControlBladeUp2(crc, blade, operator)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;
		quality: operator, platform=operatorStation;

		quality: crc, status=ok;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;
		topology: blade->crc, subcomponent;

		quality: operator, operationMode!=test;
		quality: operator, operationMode!=rundown;
	postconditions:
		update quality: blade, actualPosition+=.5;
		update quality: blade, cylinderPosition+=.5;
		update quality: blade, reportedPosition+=.5;
.
exploit moveControlBladeDown1(crc, blade)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;

		quality: crc, status=ok;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;

	postconditions:
		update quality: blade, actualPosition-=.5;
		update quality: blade, reportedPosition-=.5;
.
exploit moveControlBladeDown2(crc, blade)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;

		quality: crc, status=ok;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;
	postconditions:
		update quality: blade, actualPosition-=.5;
		update quality: blade, cylinderPosition-=.5;
		update quality: blade, reportedPosition-=.5;
.
exploit changeOperationModeManual(scram, operator)=
	preconditions:
		quality: scram, platform=scramUnit;
		quality: operator, platform=operatorStation;

		quality: scram, status=ok;
		quality: scram, powerStatus=on;

		quality: operator, status=ok;
		quality: operator, powerStatus=on;

		topology: operator->scram, connected_modbus_slave;
		topology: scram->operator, connected_modbus_master;
	postconditions:
		update quality: operator, operationMode=manual;
		update quality: scram, mode=manual;
.

exploit changeOperationModePulse(scram, operator)=
	preconditions:
		quality: scram, platform=scramUnit;
		quality: operator, platform=operatorStation;

		quality: scram, status=ok;
		quality: scram, powerStatus=on;

		quality: operator, status=ok;
		quality: operator, powerStatus=on;

		topology: operator->scram, connected_modbus_slave;
		topology: scram->operator, connected_modbus_master;
	postconditions:
		update quality: operator, operationMode=pulse;
		update quality: scram, mode=pulse;
.

exploit changeOperationModeRundown(scram, operator)=
	preconditions:
		quality: scram, platform=scramUnit;
		quality: operator, platform=operatorStation;

		quality: scram, status=ok;
		quality: scram, powerStatus=on;

		quality: operator, status=ok;
		quality: operator, powerStatus=on;

		topology: operator->scram, connected_modbus_slave;
		topology: scram->operator, connected_modbus_master;
	postconditions:
		update quality: operator, operationMode=rundown;
		update quality: scram, mode=rundown;
.

exploit changeOperationModeTest(scram, operator, crc)=
	preconditions:
		quality: scram, platform=scramUnit;
		quality: operator, platform=operatorStation;
		quality: crc, platform=controlRodController;

		quality: scram, status=ok;
		quality: scram, powerStatus=on;

		quality: operator, status=ok;
		quality: operator, powerStatus=on;

		quality: crc, powerStatus=on;
		quality: crc, emagPower=off;

		topology: operator->scram, connected_modbus_slave;
		topology: scram->operator, connected_modbus_master;
		topology:operator->crc,connected_modbus_master;
		topology:crc->operator,connected_modbus_slave;
	postconditions:
		update quality: operator, operationMode=test;
		update quality: scram, mode=test;
.
exploit CAMAlarmDilute(CAM, ventCon)=
	preconditions:
		quality: CAM, platform=CAM;
		quality: ventCon, platform=ventilationController;

		quality: CAM, powerStatus=on;
		quality: CAM, airborneRadiation=high;

		quality: ventCon, status=ok;
		quality: ventCon, powerStatus=on;
		quality: ventCon, mode!=dilute;

		topology:CAM->ventCon,connected_modbus_slave;
		topology:ventCon->CAM,connected_modbus_master;
	postconditions:
		update quality: ventCon, mode=dilute;
.
exploit diffuserLeak1(diffuser, airRad)=
	preconditions:
		quality: diffuser, platform=diffuser;
		quality: airRad, platform=physical;

		quality: diffuser, powerStatus=off;
		quality: airRad, N16_level<100;#*******ARBITRARY

	postconditions:
		update quality: airRad, N16_level:=100;#*******ARBITRARY
.
exploit diffuserLeak2(diffuser, airRad)=
	preconditions:
		quality: diffuser, platform=diffuser;
		quality: airRad, platform=physical;

		quality: diffuser, status=compromised;
		quality: airRad, N16_level<100;#*******ARBITRARY

	postconditions:
		update quality: airRad, N16_level:=100;#*******ARBITRARY
.

exploit updateAreaMonitoringSystem(ams, airRad)=
	preconditions:
		quality: ams, platform=N16Detector;
		quality: airRad, platform=physical;

		quality: ams, powerStatus=ok;
		quality: ams, status=ok;
		quality: ams, N16_level<>airRad.N16_level;

		topology:airRad<->ams,physical;

	postconditions:
		update quality: ams, N16_level:=airRad.N16_level;
.
exploit areaMonitoringSystemAlarm(ams, evacAlarm)=
	preconditions:
		quality: ams, platform=N16Detector;
		quality: evacAlarm, platform=evacuationAlarm;

		quality:evacAlarm,powerStatus=on;
		quality:ams,status=ok;
		quality:ams,powerStatus=on;
		quality:ams,N16_level>10;#**************ARBITRARY

		topology:evacAlarm->ams,connected_modbus_master;
		topology:ams->evacAlarm,connected_modbus_slave;

	postconditions:
		update quality:evacAlarm,activated=true;
.
exploit pressurizeAirTank(airSupply)=
	preconditions:
		quality:airSupply,platform=buildingCompressedAir;

		quality:airSupply,status=ok;
		quality:airSupply,powerStatus=on;
		quality:airSupply,compressor=on;
		quality:airSupply,ctValve=open;
		quality:airSupply,tankPressure<50;#******Arbitrary maximum
	postconditions:
		update quality:airSupply,tankPressure+=5;#******Arbitrary
.
exploit pulseControlRod(airSupply,pulseRod)=
	preconditions:
		quality:airSupply,platform=buildingCompressedAir;
		quality:airSupply,tankPressure>5;#******Arbitrary
		quality:pulseRod,platform=pulseControlRod;
		topology:airSupply->pulseRod,pneumatic_open;
	postconditions:
		update quality:pulseRod,actualPosition:=15;#******Arbitrary
		update quality:pulseRod,pulsed=true;
		update quality:airSupply,tankPressure-=5;#******Arbitrary
.
exploit pulseControlRodFall1(airSupply,pulseRod)=
	preconditions:
		quality:airSupply,platform=buildingCompressedAir;
		quality:pulseRod,platform=pulseControlRod;

		topology:airSupply->pulseRod,pneumatic_closed;
	postconditions:
		update quality:pulseRod,actualPosition:=pulseRod.cylinerPosition;
		update quality:pulseRod,pulsed=false;
.
exploit pulseControlRodFall2(airSupply,pulseRod)=
	preconditions:
		quality:airSupply,platform=buildingCompressedAir;
		quality:airSupply,tankPressure<5;#******Arbitrary

		quality:pulseRod,platform=pulseControlRod;
		topology:airSupply->pulseRod,pneumatic_open;
	postconditions:
		update quality:pulseRod,actualPosition:=pulseRod.cylinerPosition;
		update quality:pulseRod,pulsed=false;
.
exploit tempScram(sensor,scram)=
	preconditions:
        quality:sensor,platform=tempSensor;
		quality:sensor,powerStatus=on;
        quality:sensor,temp>500;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
    postconditions:
        update quality:scram,activated=true;
.

exploit seismicScram(sensor,scram)=
	preconditions:
		quality:sensor,platform=seismicSensor;
		quality:sensor,powerStatus=on;
		quality:sensor,magnitude>.0061;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.

exploit highFluxScram(sensor,scram)=
	preconditions:
		quality:sensor,platform=fluxMonitor;
		quality:sensor,powerStatus=on;
		quality:sensor,alarmActivated=true;

		quality:scram,platform=scramUnit;
		quality:scram,mode!=pulse;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.

exploit buildingEvacScram(evacAlarm,scram)=
	preconditions:
		quality:evacAlarm,platform=evacuationAlarm;
		quality:evacAlarm,activated=true;
		quality:evacAlarm,powerStatus=on;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: evacAlarm->scram,connected_modbus_slave;
		topology: scram->evacAlarm,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.

exploit manualBeamRoomScram(beamRoom,scram)=
	preconditions:
		quality:beamRoom,platform=scramInput;
		quality:beamRoom,activated=true;
		quality:beamRoom,powerStatus=on;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: beamRoom->scram,connected_modbus_slave;
		topology: scram->beamRoom,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.

exploit manualScram(operator,scram)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,manualScram=true;
		quality:operator,powerStatus=on;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology:operator->scram,connected_modbus_slave;
		topology:scram->operator,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.

exploit HVSensorScram(sensor,scram)=
	preconditions:
		quality:sensor,platform=HVSensor;
		quality:sensor,activated=true;
		quality:sensor,powerStatus=on;

		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,powerStatus=on;

		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		update quality:scram,activated=true;
.
exploit executeScram(crc,scram)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:scram,platform=scramUnit;
		quality:scram,status=ok;
		quality:scram,activated=true;
		topology: scram->crc,connected_emag_power;
    postconditions:
        update quality:crc,emagPower=off;
		delete topology:scram->crc,connected_emag_power;
.
exploit dropBlades1(crc, blade)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:blade,platform=controlBlade;

		quality:crc,emagPower=off;

		topology:blade->crc,subcomponent;
    postconditions:
        update quality:blade,actualPosition:=0;
.

exploit dropBlades2(crc, blade)=
	preconditions:
        quality:crc,platform=controlRodController;
		quality:blade,platform=pulseControlRod;

		quality:crc,emagPower=off;

		topology:blade->crc,subcomponent;
    postconditions:
        update quality:blade,actualPosition:=0;
.
exploit coolantLossShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=coolantLevelSensor;
		quality:sensor,powerStatus=on;
		quality:sensor,level<-8.0;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit coolantTempShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=coolantTempSensor;
		quality:sensor,powerStatus=on;
		quality:sensor,temp>400;#*******Arbitrary

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit fuelTempShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=tempSensor;
		quality:sensor,temp>350;#*******Arbitrary
		quality:sensor,powerStatus=on;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit CAMShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=CAM;
		quality:sensor,airborneFissionProducts=high;
		quality:sensor,powerStatus=on;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit areaMonitoringSystemShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=N16Detector;
		quality:sensor,N16_level>10;#*************Arbitrary
		quality:sensor,powerStatus=on;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit ventilationAirDetectorShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=Ar41Detector;
		quality:sensor,Ar41_level>10;#************Arbitrary
		quality:sensor,powerStatus=on;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.

exploit coolantLeakShutdown(operator,sensor)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=ok;
		quality:operator,powerStatus=on;

		quality:sensor,platform=conductivitySensor;
		quality:sensor,leakDetected=true;
		quality:sensor,powerStatus=on;

		topology:sensor->operator,connected_modbus_slave;
		topology:operator->sensor,connected_modbus_master;
	postconditions:
		update quality:operator,manualScram=true;
.
exploit sensorPowerLoss(phys,sensor)=
	preconditions:
		topology:phys->sensor,power<=126;
		topology:phys->sensor,power>=114;
		quality:phys,platform=physical;
		quality:phys,buildingPower=on;
		quality:sensor,platform!=controlRodController;

	postconditions:
		update quality:phys,buildingPower=off;
		update quality:sensor,powerStatus=off;
		update topology:phys->sensor,power:=0;
.

exploit controlRodPowerLoss(phys,crc)=
	preconditions:
		topology:phys->crc,power<=126;
		topology:phys->crc,power>=114;

		quality:phys,platform=physical;
		quality:phys,buildingPower=on;
		quality:crc,platform=controlRodController;
	postconditions:
		update quality:phys,buildingPower=off;
		update quality:crc,powerStatus=off;
		update quality:crc,emagPower=off;
		update topology:phys->crc,power:=0;
.
exploit miscalibrateTempSensorLow(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,calibration=normal;
	postconditions:
		update quality:sensor,calibration=low;
		update quality:sensor,temp-=50;#Arbitrary
.

exploit miscalibrateTempSensorHigh(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,calibration=normal;
	postconditions:
		update quality:sensor,calibration=high;
		update quality:sensor,temp+=50;#Arbitrary
.

exploit miscalibrateTempSensorHighPowerBase(sensor, phys)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,calibration=normal;

		quality:phys,platform=physical;

		topology:phys->sensor,power<114;

	postconditions:
		update quality:sensor,calibration=high;
		update quality:sensor,temp+=50;#Arbitrary
.
exploit incTempReading(sensor)=
	preconditions:
		quality:sensor,platform=tempSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,temp:=600;#Arbitrary above scram point
.

exploit incSeismicReading(sensor)=
	preconditions:
		quality:sensor,platform=seismicSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,magnitude:=.007;#Arbitrary above scram point
.

exploit incPowerReading(sensor)=
	preconditions:
		quality:sensor,platform=powerSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,powerLevel:=1.5;#Arbitrary above scram point
.

exploit incFluxReading(sensor)=
	preconditions:
		quality:sensor,platform=fluxMonitor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,alarmActivated=true;
.

exploit triggerCAMAlarm(sensor)=
    preconditions:
        quality:sensor,platform=CAM;
        quality:sensor,status=compromised;
    postconditions:
        update quality:sensor,airborneRadiation=high;
.

exploit triggerN16Alarm(sensor)=
    preconditions:
        quality:sensor,platform=N16Detector;
        quality:sensor,status=compromised;
    postconditions:
        update quality:sensor,N16_level:=15;#*********ARBITRARY
.

exploit triggerAr41Alarm(sensor)=
    preconditions:
        quality:sensor,platform=Ar41Detector;
        quality:sensor,status=compromised;
    postconditions:
         update quality:sensor,Ar41_level:=15;#*********ARBITRARY
.
exploit decCoolantLevelReading(sensor)=
	preconditions:
		quality:sensor,platform=coolantLevelSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,level:=-10;#Arbitrary below shutdown setpoint
.

exploit incCoolantTempReading(sensor)=
	preconditions:
		quality:sensor,platform=coolantTempSensor;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,temp:=600;#Arbitrary above shutdown setpoint
.
exploit lockAirSupplyValve(airSupply)=
	preconditions:
		quality:airSupply,platform=buildingCompressedAir;
		quality:airSupply,status=compromised;
	postconditions:
		update quality:airSupply,compressor=on;
		update quality:airSupply,ctValve=open;
.
exploit manipulateRecorder(csr)=
	preconditions:
		quality:csr,platform=controlSystemRecorder;
		quality:csr,status=compromised;
	postconditions:
		update quality:csr,dataValid=false;
.
exploit dosScramSensorTrigger(sensor, scram)=
	preconditions:
		quality: scram,platform=scramUnit;
		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		delete topology: sensor->scram,connected_modbus_slave;
		delete topology: scram->sensor,connected_modbus_master;
		update quality:scram,activated=true;
.

exploit dosScramSensorUntrigger(sensor, scram)=
	preconditions:
		quality: scram,platform=scramUnit;
		topology: sensor->scram,connected_modbus_slave;
		topology: scram->sensor,connected_modbus_master;
	postconditions:
		delete topology: sensor->scram,connected_modbus_slave;
		delete topology: scram->sensor,connected_modbus_master;
.

exploit triggerManualScram(sensor)=
	preconditions:
		quality:sensor,platform=operatorStation;
		quality:sensor,status=compromised;
	postconditions:
		update quality:sensor,manualScram=true;
.

exploit	desyncOperationModeScramPulse(scram)=
	preconditions:
		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;
	postconditions:
		update quality:scram,mode=pulse;
.

exploit	desyncOperationModeScramManual(scram)=
	preconditions:
		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;
	postconditions:
		update quality:scram,mode=manual;
.
exploit desyncOperationModeOperatorPulse1(operator)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=compromised;
	postconditions:
		update quality:operator,mode=pulse;
.
exploit desyncOperationModeOperatorPulse2(operator, scram)=
	preconditions:
		quality:operator,platform=operatorStation;

		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;

		topology:operator->scram,connected_modbus_slave;
		topology:scram->operator,connected_modbus_master;
	postconditions:
		update quality:operator,mode=pulse;
.
exploit desyncOperationModeOperatorManual1(operator)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=compromised;
	postconditions:
		update quality:operator,mode=manual;
.
exploit desyncOperationModeOperatorManual2(operator, scram)=
	preconditions:
		quality:operator,platform=operatorStation;

		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;

		topology:operator->scram,connected_modbus_slave;
		topology:scram->operator,connected_modbus_master;
	postconditions:
		update quality:operator,mode=manual;
.
exploit desyncOperationModeOperatorRundown1(operator)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=compromised;
	postconditions:
		update quality:operator,mode=rundown;
.
exploit desyncOperationModeOperatorRundown2(operator, scram)=
	preconditions:
		quality:operator,platform=operatorStation;

		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;

		topology:operator->scram,connected_modbus_slave;
		topology:scram->operator,connected_modbus_master;
	postconditions:
		update quality:operator,mode=rundown;
.
exploit desyncOperationModeOperatorTest1(operator)=
	preconditions:
		quality:operator,platform=operatorStation;
		quality:operator,status=compromised;
	postconditions:
		update quality:operator,mode=test;
.
exploit desyncOperationModeOperatorTest2(operator, scram)=
	preconditions:
		quality:operator,platform=operatorStation;

		quality:scram,platform=scramUnit;
		quality:scram,status=compromised;

		topology:operator->scram,connected_modbus_slave;
		topology:scram->operator,connected_modbus_master;
	postconditions:
		update quality:operator,mode=test;
.

exploit desyncBladePositionHigh1(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;

		quality: crc, status=compromised;

	postconditions:
		update quality: blade, reportedPosition+=.5;
.

exploit desyncBladePositionHigh2(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;

		quality: crc, status=compromised;

	postconditions:
		update quality: blade, reportedPosition+=.5;
.

exploit desyncBladePositionLow1(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;

		quality: crc, status=compromised;

	postconditions:
		update quality: blade, reportedPosition-=.5;
.

exploit desyncBladePositionLow2(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;

		quality: crc, status=compromised;

	postconditions:
		update quality: blade, reportedPosition-=.5;
.

exploit moveBladeUpDesync1(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;

		quality: crc, status=compromised;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;
	postconditions:
		update quality: blade, actualPosition+=.5;
.

exploit moveBladeUpDesync2(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;

		quality: crc, status=compromised;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition<15; #*******ARBITRARY max position****
		quality: blade, motorStatus=ok;
	postconditions:
		update quality: blade, actualPosition+=.5;
.

exploit moveBladeDownDesync1(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=controlBlade;

		quality: crc, status=compromised;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition>0;
		quality: blade, motorStatus=ok;
	postconditions:
		update quality: blade, actualPosition-=.5;
.

exploit moveBladeDownDesync2(blade, crc)=
	preconditions:
		quality: crc, platform=controlRodController;
		quality: blade, platform=pulseControlRod;

		quality: crc, status=compromised;
		quality: crc, powerStatus=on;
		quality: crc, emagPower=on;

		quality: blade, actualPosition>0;
		quality: blade, motorStatus=ok;
	postconditions:
		update quality: blade, actualPosition-=.5;
.

exploit compromiseScram(scram)=
	preconditions:
		quality: scram, platform=scramUnit;

		quality: scram, status=ok;
	postconditions:
		update quality: scram, status=compromised;
.
