/* C declarations */
%{
#include<stdio.h>
#include "identifier.h"
#include "exploit.h"
#include "globals.h"

struct param_list_node *parameter_list;

int eplex();
void eperror(char const *);
%}

/*Bison declarations */
%name-prefix="ep"

%union {
	struct exploit_list_node *e_n;
	struct exploit *e;
    struct param_list_node *param_n;
	struct precondition_list_node *pre_n;
	struct postcondition *post;
	struct postcondition_list_node *post_n;
	struct parameterized_fact *f;
	char *i;
}

%token EXPLOIT LPAREN RPAREN EQ PERIOD COMMA PRECONDITIONS COLON POSTCONDITIONS INSERT DELETE QUALITY TOPOLOGY SEMI ERR 

%token <i> IDENTIFIER

%type <e_n> root exploitlist
%type <e> e 
%type <param_n> params param_list 
%type <pre_n> pre prec 
%type <post_n> post postc 
%type <post> operation 
%type <f> p_fact 
%%

root:	exploitlist	{$$ = $1; exploits = $$; printf("root -> exploitlist rule: result is %p\n", (void *) exploits);}
;

exploitlist:	exploitlist e	{$$ = insert_exploit($2,$1);/* printf("exploitlist -> exploitlist e rule: result is %p\n", (void *) $$);*/}
	|e	{$$ = new_exploit_list($1); /* printf("exploitlist -> e rule: result is %p\n", (void *) $$);*/}
;

e:	EXPLOIT IDENTIFIER LPAREN param_list RPAREN EQ pre post PERIOD	{/* printf("e rule\n");*/ $$ = new_exploit($2,$4,$7,$8,identifier_ht);}
;

param_list:	params	{/* printf("param_list rule 1\n");*/ $$ = $1}
	|	/*empty */ {/*printf("pram_list rule empty\n");*/ $$ = new_param_list(parameter_list);}
	
params:	IDENTIFIER COMMA params	{/* printf("params rule 1\n"); */ $$ = insert_param($1,$3,identifier_ht);}
	| IDENTIFIER	{/* printf("params rule 2 (IDENTIFIER)\n"); */ $$ = insert_param($1,new_param_list(parameter_list),identifier_ht);}
;

pre:	PRECONDITIONS COLON prec	{/* printf("pre rule\n"); */ $$ = $3;}
;

prec:	p_fact prec	{/* printf("prec rule 1\n");*/ $$ = insert_precondition(new_precondition($1),$2);}
	|	p_fact {/* printf("prec rule 2\n"); */ $$ = new_precondition_list(new_precondition($1));}
;

post:	POSTCONDITIONS COLON postc	{/* printf("post rule\n"); */ $$ = $3;}
;

postc:	operation postc	{/* printf("postc rule 1\n");*/ $$ = insert_postcondition($1,$2);}
	|	operation {/* printf("postc rule 2\n"); */ $$ = new_postcondition_list($1);}
;

operation:	INSERT p_fact	{/* printf("operation rule 1 (INSERT)\n"); */ $$ = new_postcondition(INS,$2);}
	| DELETE p_fact	{/* printf("operation rule 2 (DELETE)\n"); */ $$ = new_postcondition(DEL,$2);}
;

p_fact:	QUALITY COLON IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI	{/* printf("p_fact rule 1\n"); */ $$ = new_parameterized_quality($3,$5,$7,parameter_list,identifier_ht);}
	| TOPOLOGY COLON IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMI	{/* printf("p_fact rule 2\n"); */ $$ = new_parameterized_topology($3,$5,$7,parameter_list,identifier_ht);}
;

%%

void eperror(char const *str) {
	fprintf (stderr, "%s\n", str);
}
