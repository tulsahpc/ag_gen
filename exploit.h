// exploit data structures

#ifndef EXPLOIT_H_
#define EXPLOIT_H_

#define INS 201
#define DEL 202
#define P_QUALITY 301
#define P_TOPOLOGY 302

#define M_p 101

//Parameters are placeholders for assets

struct param {
    struct identifier *name;
};

struct param_list_node {
    struct param *p;
    struct param_list_node *prev;
    struct param_list_node *next;
};

struct parameterized_quality {
    struct param *p;
    struct identifier *property;
    struct identifier *value;
};

struct parameterized_topology {
    struct param *p1;
    struct param *p2;
    struct identifier *relationship;
};

struct parameterized_fact {
    int type; //P_QUALITY OR P_TOPOLOGY
    union {
        struct parameterized_quality *pq;
        struct parameterized_topology *pt;
    };
};

struct precondition {
    struct parameterized_fact *pf;
};

struct precondition_list_node {
    struct precondition *pre;
    struct precondition_list_node *prev;
    struct precondition_list_node *next;
};

struct postcondition {
    int command; //INSERT OR DELETE
    struct parameterized_fact *pf;
};

struct postcondition_list_node {
    struct postcondition *post;
    struct postcondition_list_node *prev;
    struct postcondition_list_node *next;
};

struct exploit {
    struct identifier *name;
    struct param_list_node *param_list;
    struct precondition_list_node *pre_list;
    struct postcondition_list_node *post_list;
};

struct exploit_list_node {
    struct exploit *e;
    struct exploit_list_node *prev;
    struct exploit_list_node *next;
};

unsigned int param_hash(char *);

struct param *new_param(char *, struct identifier_hashtable *);

struct param_list_node *new_param_list(struct param_list_node *);

struct param_list_node *find_param(char *, struct param_list_node *);

struct param_list_node *insert_param(char *, struct param_list_node *, struct identifier_hashtable *);

int param_fact_match(struct parameterized_fact *, struct parameterized_fact *);

struct parameterized_fact *new_parameterized_quality(char *, char *, char *, struct param_list_node *,
                                                     struct identifier_hashtable *);

int param_quality_match(struct parameterized_quality *, struct parameterized_quality *);

struct parameterized_fact *new_parameterized_topology(char *, char *, char *, struct param_list_node *,
                                                      struct identifier_hashtable *);

int param_topology_match(struct parameterized_topology *, struct parameterized_topology *);

struct precondition *new_precondition(struct parameterized_fact *);

struct precondition_list_node *new_precondition_list(struct precondition *);

struct precondition_list_node *find_precondition(struct precondition *, struct precondition_list_node *);

struct precondition_list_node *insert_precondition(struct precondition *, struct precondition_list_node *);

struct postcondition *new_postcondition(int, struct parameterized_fact *);

struct postcondition_list_node *new_postcondition_list(struct postcondition *);

struct postcondition_list_node *find_postcondition(struct postcondition *, struct postcondition_list_node *);

struct postcondition_list_node *insert_postcondition(struct postcondition *, struct postcondition_list_node *);

struct exploit *new_exploit(char *, struct param_list_node *, struct precondition_list_node *,
                            struct postcondition_list_node *, struct identifier_hashtable *);

struct exploit_list_node *new_exploit_list(struct exploit *);

struct exploit_list_node *find_exploit(struct exploit *, struct exploit_list_node *);

struct exploit_list_node *insert_exploit(struct exploit *, struct exploit_list_node *);

char *exploit_list_to_string(struct exploit_list_node *);

#endif