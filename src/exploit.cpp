#include <algorithm>
#include <vector>
#include <memory>
#include <libpq-fe.h>
#include <cstdlib>

#include "exploit.hpp"
#include "util_common.hpp"
#include "util_db.hpp"

using namespace std;

void Exploit::fetch_preconds()
{
 	PGresult *res;
 	int num_rows;

 	dbtrans_begin();

 	int id = this->id;

 	string sql = "SELECT * FROM exploit_precondition WHERE exploit_id = " + to_string(id);
 	res = PQexec(conn, sql.c_str());

 	dbtrans_end();

 	if(PQresultStatus(res) != PGRES_TUPLES_OK) {
		fprintf(stderr, "SELECT command failed: %s",
			PQerrorMessage(conn));
		exit(1);
	}

	num_rows = PQntuples(res);
	for(int i=0; i<num_rows; i++) {
		int param = stoi(PQgetvalue(res, i, 1));
		string property = PQgetvalue(res, i, 2);
		string value = PQgetvalue(res, i, 3);

		ParameterizedQuality qual(param, property, value);
		preconds.push_back(qual);
	}

	PQclear(res);
}

void Exploit::print_preconds() {
	for_each(preconds.begin(), preconds.end(), [](ParameterizedQuality& q) {
		q.print();
	});
}

Exploit::Exploit(int preId, string preName, int preNumParams) : id(preId), name(preName), num_params(preNumParams) {
	fetch_preconds();
};

int Exploit::get_id(void) {
	return id;
}

string Exploit::get_name(void) {
	return name;
}

int Exploit::get_num_params(void) {
	return num_params;
}

vector<Exploit> Exploit::fetch_all(void)
{
	vector<Exploit> exploits;

	PGresult *res;
	int num_rows;

	dbtrans_begin();

	string sql = "SELECT * FROM exploit;";
	res = PQexec(conn, sql.c_str());

	dbtrans_end();

	if(PQresultStatus(res) != PGRES_TUPLES_OK) {
		fprintf(stderr, "SELECT command failed: %s",
			PQerrorMessage(conn));
	}

	num_rows = PQntuples(res);
	for (int i=0; i<num_rows; i++) {
		int id = stoi(PQgetvalue(res, i, 0));
		string name = PQgetvalue(res, i, 1);
		int num_params = stoi(PQgetvalue(res, i, 2));

		Exploit exploit(id, name, num_params);
		exploits.push_back(exploit);
	}

	PQclear(res);

	return exploits;
}
