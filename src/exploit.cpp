#include <algorithm>
#include <vector>

#include "exploit.h"
#include "util_db.h"


using namespace std;

void Exploit::fetch_preconds() {
    vector<Row> rows = db->exec("SELECT * FROM exploit_precondition WHERE exploit_id = " + to_string(id));

    for (auto &row : rows) {
        int type = stoi(row[2]);

        if (type == 0) {
            int param1 = stoi(row[3]);
            string property = row[5];
            string value = row[6];

            ParameterizedQuality qual {param1, property, value};
            preconds_q.push_back(qual);
        } else {
            int param1 = stoi(row[3]);
            int param2 = stoi(row[4]);
            string property = row[5];
            string value = row[6];
            string op = row[7];
            string dir = row[8];

            ParameterizedTopology topo(param1, param2, dir, property, op, value);
            preconds_t.push_back(topo);
        }
    }
}

void Exploit::fetch_postconds() {
    int id = this->id;

    vector<Row> rows = db->exec("SELECT * FROM exploit_postcondition WHERE exploit_id = " + to_string(id));
    for (auto &row : rows) {
        int type = stoi(row[2]);

        if (type == 0) {
            int param1 = stoi(row[3]);
            string property = row[5];
            string value = row[6];

            ParameterizedQuality qual {param1, property, value};
            postconds_q.push_back(qual);
        } else {
            int param1 = stoi(row[3]);
            int param2 = stoi(row[4]);
            string property = row[5];
            string value = row[6];
            string op = row[7];
            string dir = row[8];

            ParameterizedTopology topo(param1, param2, dir, property, op, value);
            postconds_t.push_back(topo);
        }
    }
}

void Exploit::print_preconds_q() {
    for_each(preconds_q.begin(), preconds_q.end(), [](ParameterizedQuality &q) {
        q.print();
    });
}

void Exploit::print_preconds_t() {
    for_each(preconds_t.begin(), preconds_t.end(), [](ParameterizedTopology &t) {
        t.print();
    });
}

void Exploit::print_postconds_q() {
    for_each(postconds_q.begin(), postconds_q.end(), [](ParameterizedQuality &q) {
        q.print();
    });
}

void Exploit::print_postconds_t() {
    for_each(postconds_t.begin(), postconds_t.end(), [](ParameterizedTopology &t) {
        t.print();
    });
}

Exploit::Exploit(int preId, string &preName, int preNumParams) : id(preId), name(preName), num_params(preNumParams) {
    fetch_preconds();
    fetch_postconds();
};

void Exploit::print_id() {
    cout << "Exploit " + to_string(this->id) << endl;
}

void Exploit::print_all() {
    vector<Exploit> exploit_list = Exploit::fetch_all();
    for_each(exploit_list.begin(), exploit_list.end(), [](Exploit &e) {
        cout << "Exploit: " + e.get_name() << endl << "~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
        e.print_preconds_q();
        e.print_preconds_t();
    });
}

vector<ParameterizedQuality> Exploit::precond_list_q() {
    return preconds_q;
}

vector<ParameterizedTopology> Exploit::precond_list_t() {
    return preconds_t;
}

vector<ParameterizedQuality> Exploit::postcond_list_q() {
    return postconds_q;
}

vector<ParameterizedTopology> Exploit::postcond_list_t() {
    return postconds_t;
}

vector<Exploit> Exploit::fetch_all() {
    vector<Exploit> exploits;
    vector<Row> rows = db->exec("SELECT * FROM exploit;");

    for (auto &row : rows) {
        int id = stoi(row[0]);
        string name = row[1];
        int num_params = stoi(row[2]);

        Exploit exploit(id, name, num_params);
        exploits.push_back(exploit);
    }

    return exploits;
}
